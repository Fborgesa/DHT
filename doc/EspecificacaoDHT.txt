suirtEspecificação da arquitetura DHT

1. Introdução 
1.1. Visão geral.
    A porta utilizada pelos nós e pelo rendezvous é a porta UDP 30000.

1.2. Formato das mensagens.

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       op      |      seq      |     ack       |   flagRoot    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                             nodeID                            |        
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                           listaIDAddr                         | Campo de tamanho variável. Pode conter uma
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ou várias entradas do tipo (nodeID, IP).
|                          listaKeyValue                        | Campo de tamanho variável. Pode conter uma 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ou várias entradas do tipo (key, value).
|                           Checksum                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

1.3. Significado de cada campo:
*** Observação: caso haja dúvidas sobre os significados dos campos ou seus funcionamentos, veja o exemplo 5.2.
    - op: 
        0 (ack) -> confirma o recebimento de uma mensagem.
        1 (newNode) -> comunica ao rendezvous que o nó quer entrar na DHT.
        2 (newNodeAns) -> resposta dos rendezvous a uma mensagem newNode.
        3 (joinDHT) -> comunica ao rootID que o nó quer entrar na DHT. 
        4 (joinDHTAns) -> resposta do rootNode a uma mensagem joinDHT.
        5 (joinAsNext) -> comunica a uma nó que um novo nó quer entrar na DHT como seu sucessor.
        6 (joinAsNextAns) -> resposta do nó a uma mensagem joinAsNext.
        7 (joinAsPrev) -> comunica a uma nó que um novo nó quer entrar na DHT como seu antecessor.
        8 (joinAsPrevAns) -> resposta do nó a uma mensagem joinAsPrev.
        9 (joinedDHT) -> comunica ao rendezvous que o nó entrou na DHT.
        10 (leaveDHT) -> comunicando a saída do nó antecessor no DHT ao rendezvous.
    - flagRoot:
        Indica se um novo nó é o root ou não. 
        0 no caso de não. 
        1 no caso de sim. 
    - nodeID:
        caso op == 2 -> informa o nodeID do novo nó. Nesse caso o nodeID foi gerado pelo rendezvous.
        caso op == 3 -> informa o nodeID do nó que quer entrar na DHT.
        caso op == 5 -> informa o nodeID do nó que quer entrar na DHT.
        caso op == 7 -> informa o nodeID do nó que quer entrar na DHT.   
        caso op == 9 -> informa o nodeID do nó que quer entrar na DHT. 

2. Responsabilidades de cada entidade:
2.1. Rendezvous point
    - Define o nodeID que será atribuído a cada nó que entra na DHT.
    - Define o root node.
    - Mantém informação sobre quem é o root node atual.
    - Informa o IP:Porta do root node para nós que querem entrar na DHT.
    - Informa ao nó que querem entrar qual é o sentido da busca no DHT (sentido horário ou não).
    - Mantém uma tabela com associações do tipo (nodeID, IP:Porta).
    - Mantém uma topologia local da DHT.
2.2. Nó
    - Posui um nodeID atribuído pelo Rendezvous point.
    - Possui os nodeID`s dos dois nós anteriores.
    - Possui os nodeID`s dos próximos dois nós.
    - Possui os IP`s dos dois nós anteriores.
    - Possui os IP`s dos próximos dois nós.
    - Guarda entradas da DHT, que possuem o seguinte formato (key, value).
    - Matém informação se é o root node ou não.
    - Possui um mecanismo para entrar na DHT.
    - Possui um mecanismo para sair da DHT.
    - Pode pedir a inserção de uma entrada (key, value) na DHT.
    - Pode buscar um valor na DHT a partir de uma chave.
    - Monitora seus vizinhos anterior e posterior.
    - Possui um mecanismo para restabelecer a DHT caso um de seus vizinhos saia sem aviso.

3. Detalhamento das funcionalidades do rendezvous point:

3.1. Define o nodeID que será atribuído a cada nó que entra na DHT.
    - Um nó que pretende entrar na DHT envia uma mensagem "Hello" para o rendezvous point.
    - O Rendezvous point gera um nodeID de forma aleatória.
    - O nodeID gerado deve estar entre [0, k] ou [2, k]. No caso de estar entre [2, k],
      todos os nodeID`s devem ser uma potência de 2.
    - A decisão de utilizar um intervalo entre [0, k] ou [2, k] é indicada através de um
      arquivo de configuração chamado "range.conf".
    - O nodeID é atribuido ao nó entrante na resposta do rendezvous ao nó, assumindo que o nó vai entrar na rede (DHT);
      
3.2. Define o rootNode:

    - Verfica a existência do DHT local para a definição do rootNode:
        - caso DHT não existir, monta o DHT local (rendezvous):
            - adiciona o rootNode ao DHT;
            - avisa ao nó entrante que ele é o rootNode através de algum parâmetro (0, 1);
            - recebe IP:Porta do rootNode e associa os dados recebidos ao ID gerado no item 3.1;

        - caso já existe DHT local:
            - atualiza o DHT local para inserção do novo nó do DHT;
            - informa para o n-ésimo nó entrante o IP:Porta do rootNode;

        - seta o tempo de espera do Ack do nó entrante;

3.3 Gerenciameto do DHT local:

4. Detalhamento das funcionalidades do nó:

4.1. Envio da requisição de conexão ao rendezvous:

    4.1.1. Recebeu a mensagem do servidor rendezvous:
        * Caso for rootNode:
            - Recebe e armazena o ID e o PARÂMETRO de rootNode;
            - Envia para o servidor (rendezvous) o IP:Porta onde estará escutando;

        * Caso for novo nó entrante:
            - Recebe as informações do rendezvous (ID e IP:Porta do rootNode);
            - Armazena o ID recebido;
            

4.2. Entrada do nó no DHT:
    - contacta o rootNode para inserção na rede;
    - ?? Varre o DHT para localizar o sucessor ou o antecessor para sua inserção na rede;

4.3. Nó na rede DHT:
    - Pinga de segundo em segundos verificando a existência dos nos antecessor e sucessor;
    - Tem mecanismo para reatar o nó quando seu sucessor ou antecessor morrer;
    - Informa ao rendezvous sobre a queda de algum nó na rede;
    - Informa ao rendezvous sobre a saída de algum nó na rede;

5. Exemplos de funcionamento:
5.1. Entrada do primeiro nó na DHT:

    -> cria o objeto a ser enviado para o rendezvous com os seguintes
    parâmetros:
    op = 1 (newNode)
    nó ====================== op = 1 (newNode) =======================>>> rendezvous point
                                                                          -> gera um nodeID de forma aleatória.
                                                                          -> insere a entrada (nodeID) na tabela nodeID_IP.     # A entrada é inserida
                                                                                                                                # de forma ordenada.
                                                                          -> seta o seguinte campo: 
                                                                          rootID = nodeID.
                                                                          -> cria o objeto a ser enviado para o nó com os seguintes parâmetros: 
                                                                          op = 2 (newNodeAns), flagRoot = 1, nodeID.
                                                                          
    nó <<<=================== op = 2 (newNodeAns) ======================= rendezvous point
    if (flagRoot == 1)
    -> seta os seguintes campos:
    nodeID, root = 1, rootID, rootAddr,
    prevID1 = -1, prevIP1 = -1, prevID2 = -1, prevIP2 = -1,
    nextID1 = -1, nextIP1 = -1, nextID2 = -1, nextIP2 = -1.
    
    -> cria um pacote com os parâmetros: IP:Porta no qual vai estar
        escutando os novos nó;
    nó ====================== op = 0 (Ack) =============================> rendezvous point
                                                                          -> associa o IP:Porta com com nodeID do rootNode gerado;
                                                                          -> atualiza sua DHT local.
        
            
5.2. Entrada de um novo nó na DHT, já com outros nós presentes.

    -> cria o objeto a ser enviado para o rendezvous com os seguintes
    parâmetros:
    op = 1 (newNode)
    
    nó ====================== op = 1 (newNode) =======================>>> rendezvous point
                                                                          -> gera um nodeID de forma aleatória.
                                                                          -> insere a entrada (nodeID) na tabela nodeID_IP.     # A entrada é inserida
                                                                                                                                    # de forma ordenada.
                                                                          -> insere o nó na DHT local.
                                                                          -> cria o objeto a ser enviado para o nó com os seguintes parâmetros:
                                                                          op = 2 (newNodeAns), flagRoot = 0, nodeID, (rootID, rootIP:rootPort).
                                                                          -> avisa como vai ser a busca no DHT (sentido horário ou não).
                                                                          
    nó <<<=================== op = 2 (newNodeAns) ======================= rendezvous point
    if (flagRoot == 0)
    -> seta os seguintes campos:
    nodeID, root = 0, rootID, rootIP:rootPort,
    prevID1 = -1, prevIP1 = -1, prevID2 = -1, prevIP2 = -1,
    nextID1 = -1, nextIP1 = -1, nextID2 = -1, nextIP2 = -1.
    -> cria o objeto a ser enviado para o nó com os seguintes parâmetros:
    op = 3 (joinDHT), nodeID.
   
    nó ======================= op = 3 (joinDHT) ======================>>> rootNode
                                                                          
                                                                          -> cria o objeto a ser enviado para o nó com os seguintes parâmetros:
                                                                          op = 4 (joinDHTAns), (prevID, prevIP) do rootNode.
                                                                          
    nó <<<=================== op = 4 (joinDHTAns) ======================= rootNode
    -> seta os seguintes campos: 
    prevID1, prevIP1.
    -> cria o objeto a ser enviado para o nó com os seguintes parâmetros:
    op = 5 (joinAsNext), nodeID.
       
    nó ===================== op = 5 (joinAsNext) =====================>>> prev
                                                                          -> busca o ID e o IP do segundo nó anterior ao novo node (prevID2, prevIP2).
                                                                          -> busca o ID e o IP do nó posterior ao novo node (nextID, nextIP).
                                                                          -> busca o ID e o IP do segundo nó posterior ao novo node (nextID2, nextIP2).
                                                                          -> seta os seguintes campos: nextID2 = nextID, nextID, newNodeID.
                                                                          -> cria o objeto a ser enviado para o nó com os seguintes parâmetros:
                                                                          op = 6 (joinAsNextAns), (prevID2, prevIP2), (nextID, nextIP), (nextID2, nextIP2).
                                                                          
    nó <<<================== op = 6 (joinAsNextAns) ===================== prev                                                                      
    -> seta os seguintes campos: 
    prevID2, prevIP2, nextID, nextIP, nextID2, nextIP2.
    -> cria o objeto a ser enviado para o nó com os seguintes parâmetros:
    op = 7 (joinAsPrev), nodeID.
    
    nó ===================== op = 7 (joinAsPrev) =====================>>> next
                                                                          -> cria a lista com as entradas (key, value) que serão enviadas para o nó
                                                                          que vai entrar na DHT.
                                                                          -> cria o objeto a ser enviado para o nó com os seguintes parâmetros:
                                                                          op = n (joinAsPrevAns), listaKeyValue.   
                                                                                                               
    nó <<<================= op = 8 (joinAsPrevAns) ====================== next                                                                          
    -> atualiza sua tabela DHT com os valores recebidos.
    -> cria o objeto a ser enviado para o nó com os seguintes parâmetros:
    op = 0 (ack), nodeID.
    
    nó ======================= op = 0 (ack) ==========================>>> next
                                                                          -> retira os elementos correspondentes da sua tabela DHT.
                                                                          -> seta os seguintes campos:
                                                                          prevID2 = prevID, prevIP2 = prevIP, prevID, prevIP.
                                                                          
    nó ===================== op = 9 (joinedDHT) ======================>>> rendezvous point
                                                                          -> atualiza sua DHT local.
                                                                          
    nó <<<===================== op = 0 (ack) ============================ rendezvous point                                                                       


5.3. Saída de um nó da DHT, com aviso prévio.

    5.3.1 caso o nó que saisse do DHT não fosse o nó raiz

    nó ===================== op =  (saida de nó) ====================> antecessor & sucessor
      -> Transferir chave do nó a ser retirado para os nó sucessor          -> ajustar os ponteiros dos nó antecessor e sucessor

   
    sucessor =============== op =   ()  ===============================>>> rendezvous
      -> gerar e enviar mensagem para rendezvous			  -> atualizar o DHT local
	avisar a saída do antecessor					  -> responder Ack do recebimento
   sucessor

    5.3.2. caso o nó que saisse do DHT fosse o nó raiz                 


5.4. Saída de um nó da DHT, sem aviso prévio. (O nó caiu).

    nó antecessor ====================== op =  (perda de conex) =======>>> nó sucessor
    

5.5. Inserção de uma entrada (key, value) na DHT.

5.6. Remoção de uma entrada (key, value) da DHT.

5.7. Atualização de uma entrada (key, value) da DHT.

5.8. Busca de um valor a partir de uma chave.
